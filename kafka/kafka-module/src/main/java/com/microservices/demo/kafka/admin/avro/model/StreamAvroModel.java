/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.microservices.demo.kafka.admin.avro.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class StreamAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -9187723834968572112L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StreamAvroModel\",\"namespace\":\"com.microservices.demo.kafka.avro.model\",\"fields\":[{\"name\":\"symbol\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"price\",\"type\":\"double\"},{\"name\":\"time\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"quantity\",\"type\":\"double\"},{\"name\":\"subTotal\",\"type\":\"double\"},{\"name\":\"total\",\"type\":\"double\"},{\"name\":\"order\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<StreamAvroModel> ENCODER =
      new BinaryMessageEncoder<StreamAvroModel>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StreamAvroModel> DECODER =
      new BinaryMessageDecoder<StreamAvroModel>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<StreamAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<StreamAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<StreamAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<StreamAvroModel>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this StreamAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a StreamAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a StreamAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static StreamAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String symbol;
  private double price;
  private java.lang.String time;
  private double quantity;
  private double subTotal;
  private double total;
  private double order;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StreamAvroModel() {}

  /**
   * All-args constructor.
   * @param symbol The new value for symbol
   * @param price The new value for price
   * @param time The new value for time
   * @param quantity The new value for quantity
   * @param subTotal The new value for subTotal
   * @param total The new value for total
   * @param order The new value for order
   */
  public StreamAvroModel(java.lang.String symbol, java.lang.Double price, java.lang.String time, java.lang.Double quantity, java.lang.Double subTotal, java.lang.Double total, java.lang.Double order) {
    this.symbol = symbol;
    this.price = price;
    this.time = time;
    this.quantity = quantity;
    this.subTotal = subTotal;
    this.total = total;
    this.order = order;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return symbol;
    case 1: return price;
    case 2: return time;
    case 3: return quantity;
    case 4: return subTotal;
    case 5: return total;
    case 6: return order;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: symbol = value$ != null ? value$.toString() : null; break;
    case 1: price = (java.lang.Double)value$; break;
    case 2: time = value$ != null ? value$.toString() : null; break;
    case 3: quantity = (java.lang.Double)value$; break;
    case 4: subTotal = (java.lang.Double)value$; break;
    case 5: total = (java.lang.Double)value$; break;
    case 6: order = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'symbol' field.
   * @return The value of the 'symbol' field.
   */
  public java.lang.String getSymbol() {
    return symbol;
  }


  /**
   * Sets the value of the 'symbol' field.
   * @param value the value to set.
   */
  public void setSymbol(java.lang.String value) {
    this.symbol = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public double getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(double value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'time' field.
   * @return The value of the 'time' field.
   */
  public java.lang.String getTime() {
    return time;
  }


  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(java.lang.String value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   * @return The value of the 'quantity' field.
   */
  public double getQuantity() {
    return quantity;
  }


  /**
   * Sets the value of the 'quantity' field.
   * @param value the value to set.
   */
  public void setQuantity(double value) {
    this.quantity = value;
  }

  /**
   * Gets the value of the 'subTotal' field.
   * @return The value of the 'subTotal' field.
   */
  public double getSubTotal() {
    return subTotal;
  }


  /**
   * Sets the value of the 'subTotal' field.
   * @param value the value to set.
   */
  public void setSubTotal(double value) {
    this.subTotal = value;
  }

  /**
   * Gets the value of the 'total' field.
   * @return The value of the 'total' field.
   */
  public double getTotal() {
    return total;
  }


  /**
   * Sets the value of the 'total' field.
   * @param value the value to set.
   */
  public void setTotal(double value) {
    this.total = value;
  }

  /**
   * Gets the value of the 'order' field.
   * @return The value of the 'order' field.
   */
  public double getOrder() {
    return order;
  }


  /**
   * Sets the value of the 'order' field.
   * @param value the value to set.
   */
  public void setOrder(double value) {
    this.order = value;
  }

  /**
   * Creates a new StreamAvroModel RecordBuilder.
   * @return A new StreamAvroModel RecordBuilder
   */
  public static StreamAvroModel.Builder newBuilder() {
    return new StreamAvroModel.Builder();
  }

  /**
   * Creates a new StreamAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StreamAvroModel RecordBuilder
   */
  public static StreamAvroModel.Builder newBuilder(StreamAvroModel.Builder other) {
    if (other == null) {
      return new StreamAvroModel.Builder();
    } else {
      return new StreamAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new StreamAvroModel RecordBuilder by copying an existing StreamAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new StreamAvroModel RecordBuilder
   */
  public static StreamAvroModel.Builder newBuilder(StreamAvroModel other) {
    if (other == null) {
      return new StreamAvroModel.Builder();
    } else {
      return new StreamAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for StreamAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StreamAvroModel>
    implements org.apache.avro.data.RecordBuilder<StreamAvroModel> {

    private java.lang.String symbol;
    private double price;
    private java.lang.String time;
    private double quantity;
    private double subTotal;
    private double total;
    private double order;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(StreamAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.symbol)) {
        this.symbol = data().deepCopy(fields()[0].schema(), other.symbol);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.price)) {
        this.price = data().deepCopy(fields()[1].schema(), other.price);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.time)) {
        this.time = data().deepCopy(fields()[2].schema(), other.time);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.quantity)) {
        this.quantity = data().deepCopy(fields()[3].schema(), other.quantity);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.subTotal)) {
        this.subTotal = data().deepCopy(fields()[4].schema(), other.subTotal);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.total)) {
        this.total = data().deepCopy(fields()[5].schema(), other.total);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.order)) {
        this.order = data().deepCopy(fields()[6].schema(), other.order);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing StreamAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(StreamAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.symbol)) {
        this.symbol = data().deepCopy(fields()[0].schema(), other.symbol);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.price)) {
        this.price = data().deepCopy(fields()[1].schema(), other.price);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.time)) {
        this.time = data().deepCopy(fields()[2].schema(), other.time);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.quantity)) {
        this.quantity = data().deepCopy(fields()[3].schema(), other.quantity);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.subTotal)) {
        this.subTotal = data().deepCopy(fields()[4].schema(), other.subTotal);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.total)) {
        this.total = data().deepCopy(fields()[5].schema(), other.total);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.order)) {
        this.order = data().deepCopy(fields()[6].schema(), other.order);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'symbol' field.
      * @return The value.
      */
    public java.lang.String getSymbol() {
      return symbol;
    }


    /**
      * Sets the value of the 'symbol' field.
      * @param value The value of 'symbol'.
      * @return This builder.
      */
    public StreamAvroModel.Builder setSymbol(java.lang.String value) {
      validate(fields()[0], value);
      this.symbol = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'symbol' field has been set.
      * @return True if the 'symbol' field has been set, false otherwise.
      */
    public boolean hasSymbol() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'symbol' field.
      * @return This builder.
      */
    public StreamAvroModel.Builder clearSymbol() {
      symbol = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public double getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public StreamAvroModel.Builder setPrice(double value) {
      validate(fields()[1], value);
      this.price = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public StreamAvroModel.Builder clearPrice() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'time' field.
      * @return The value.
      */
    public java.lang.String getTime() {
      return time;
    }


    /**
      * Sets the value of the 'time' field.
      * @param value The value of 'time'.
      * @return This builder.
      */
    public StreamAvroModel.Builder setTime(java.lang.String value) {
      validate(fields()[2], value);
      this.time = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'time' field.
      * @return This builder.
      */
    public StreamAvroModel.Builder clearTime() {
      time = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity' field.
      * @return The value.
      */
    public double getQuantity() {
      return quantity;
    }


    /**
      * Sets the value of the 'quantity' field.
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public StreamAvroModel.Builder setQuantity(double value) {
      validate(fields()[3], value);
      this.quantity = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'quantity' field.
      * @return This builder.
      */
    public StreamAvroModel.Builder clearQuantity() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'subTotal' field.
      * @return The value.
      */
    public double getSubTotal() {
      return subTotal;
    }


    /**
      * Sets the value of the 'subTotal' field.
      * @param value The value of 'subTotal'.
      * @return This builder.
      */
    public StreamAvroModel.Builder setSubTotal(double value) {
      validate(fields()[4], value);
      this.subTotal = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'subTotal' field has been set.
      * @return True if the 'subTotal' field has been set, false otherwise.
      */
    public boolean hasSubTotal() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'subTotal' field.
      * @return This builder.
      */
    public StreamAvroModel.Builder clearSubTotal() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'total' field.
      * @return The value.
      */
    public double getTotal() {
      return total;
    }


    /**
      * Sets the value of the 'total' field.
      * @param value The value of 'total'.
      * @return This builder.
      */
    public StreamAvroModel.Builder setTotal(double value) {
      validate(fields()[5], value);
      this.total = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'total' field has been set.
      * @return True if the 'total' field has been set, false otherwise.
      */
    public boolean hasTotal() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'total' field.
      * @return This builder.
      */
    public StreamAvroModel.Builder clearTotal() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'order' field.
      * @return The value.
      */
    public double getOrder() {
      return order;
    }


    /**
      * Sets the value of the 'order' field.
      * @param value The value of 'order'.
      * @return This builder.
      */
    public StreamAvroModel.Builder setOrder(double value) {
      validate(fields()[6], value);
      this.order = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'order' field has been set.
      * @return True if the 'order' field has been set, false otherwise.
      */
    public boolean hasOrder() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'order' field.
      * @return This builder.
      */
    public StreamAvroModel.Builder clearOrder() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StreamAvroModel build() {
      try {
        StreamAvroModel record = new StreamAvroModel();
        record.symbol = fieldSetFlags()[0] ? this.symbol : (java.lang.String) defaultValue(fields()[0]);
        record.price = fieldSetFlags()[1] ? this.price : (java.lang.Double) defaultValue(fields()[1]);
        record.time = fieldSetFlags()[2] ? this.time : (java.lang.String) defaultValue(fields()[2]);
        record.quantity = fieldSetFlags()[3] ? this.quantity : (java.lang.Double) defaultValue(fields()[3]);
        record.subTotal = fieldSetFlags()[4] ? this.subTotal : (java.lang.Double) defaultValue(fields()[4]);
        record.total = fieldSetFlags()[5] ? this.total : (java.lang.Double) defaultValue(fields()[5]);
        record.order = fieldSetFlags()[6] ? this.order : (java.lang.Double) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StreamAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<StreamAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StreamAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<StreamAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.symbol);

    out.writeDouble(this.price);

    out.writeString(this.time);

    out.writeDouble(this.quantity);

    out.writeDouble(this.subTotal);

    out.writeDouble(this.total);

    out.writeDouble(this.order);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.symbol = in.readString();

      this.price = in.readDouble();

      this.time = in.readString();

      this.quantity = in.readDouble();

      this.subTotal = in.readDouble();

      this.total = in.readDouble();

      this.order = in.readDouble();

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.symbol = in.readString();
          break;

        case 1:
          this.price = in.readDouble();
          break;

        case 2:
          this.time = in.readString();
          break;

        case 3:
          this.quantity = in.readDouble();
          break;

        case 4:
          this.subTotal = in.readDouble();
          break;

        case 5:
          this.total = in.readDouble();
          break;

        case 6:
          this.order = in.readDouble();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










